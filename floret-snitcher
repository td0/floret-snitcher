#!/usr/bin/env node

const fs = require('fs');
const rp = require('request-promise');
const cheerio = require('cheerio');
const async = require('async');
const ArgumentParser = require('argparse').ArgumentParser;
const Entities = require('html-entities').AllHtmlEntities;
const pjson = require('./package.json');

var argparser = new ArgumentParser({
    version: pjson.version,
    addHelp:true,
    description: pjson.description
});
argparser.addArgument(
    '-c',
    {
        help: 'Scrape creator\'s theme instead of official\'s',
        action: 'storeFalse'
    }
);
argparser.addArgument(
    '-p',
    {
        help: 'Get plain .txt output instead of .json',
        action: 'storeTrue'
    }
);
argparser.addArgument(
    '-t',
    {
        help: 'Get spaced & tabbed json instead of single-line one',
        action: 'storeTrue'
    }
);
argparser.addArgument(
    '-f',
    {
        help: 'Get fulll json containing full hyperlink instead of name and ID',
        action: 'storeTrue'
    }
);
argparser.addArgument(
    [ '-q', '--queue' ],
    {
        help: 'number of item fetched in a single queue (default = 3)',
        defaultValue: 3,
        action: 'store',
        choices: ['1','2','3','4','5','6','7']
    }
);
args=argparser.parseArgs();

var retry = 3; // retry limit 
const items_per_q = args.queue; // items fetched per queue
const official = args.c; // true : official || false : creator
const fmt = (!args.p)?'json':'txt'; // json or txt formating for output
const tjson = args.t; // true : tabbed json || false : single-line json
const fjson = args.f; // true : full data json || false : short data json
var failedflag = false; // if an item failed, this will turn into true
var failedPages = []; // array of pages that are failed to be fetched
var ctx = 1; // pages downloaded loop index
var n = 1; // total themes fetched
var dupe = 0; // total duplicate themes
var resp = 200; // initial responseCode
var l=(fmt=='txt')?'' : {};  // the output data get stored in this variable
const e = new Entities();
const mxi = (official) ? 15:209; // maximum amount of pages


/*
Reset = "\x1b[0m"
Bright = "\x1b[1m"
Dim = "\x1b[2m"
Underscore = "\x1b[4m"
Blink = "\x1b[5m"
Reverse = "\x1b[7m"
Hidden = "\x1b[8m"

FgBlack = "\x1b[30m"
FgRed = "\x1b[31m"
FgGreen = "\x1b[32m"
FgYellow = "\x1b[33m"
FgBlue = "\x1b[34m"
FgMagenta = "\x1b[35m"
FgCyan = "\x1b[36m"
FgWhite = "\x1b[37m"

BgBlack = "\x1b[40m"
BgRed = "\x1b[41m"
BgGreen = "\x1b[42m"
BgYellow = "\x1b[43m"
BgBlue = "\x1b[44m"
BgMagenta = "\x1b[45m"
BgCyan = "\x1b[46m"
BgWhite = "\x1b[47m"
*/

let str = '\n\t\x1b[33m\x1b[1m\x1b[4mGratter Commence\x1b[0m'+
    '\n\n\x1b[34mTheme Target\x1b[0m\t: '+
    ((official)? 'Official' : 'Creator')+
    '\n\x1b[34mFiletype\x1b[0m\t: .'+fmt;
str = (fmt==='json')? str+
    '\n\x1b[34mFormatting\x1b[0m\t: '+ ((fjson)?'Full + ':'Short + ')+
    ((tjson)?"Tabbed":"Single-Line"):str;
str = str+'\n\x1b[34mGranularity\x1b[0m\t: '+
    items_per_q + ' item(s)/queue\n';
console.log(str); 


var q = async.queue(function(task, callback){
    var options = {
        method: 'GET',
        uri: task.url,
        resolveWithFullResponse: true
    };
    rp(options).then(function(response){
        let $ = cheerio.load(response.body);
        $('.mdCMN05Ttl').each(function(){
            cr = (n==1)?'':'\n\n';
            img = $(this).prev().children().attr('src');
            id = (img.length == 127)?img.substr(53,48):img.substr(53,47);
            dl = 'http://dl.shop.line.naver.jp/themeshop/v1/products/'+
                   id+'/ANDROID/theme.zip';
            tn = e.decode($(this).html());
            if(fmt=='txt'){
                    l+=cr+tn+"\n"+dl;
                    n++;
            }else if(fmt=='json'){
                if(l[tn] !== undefined) dupe++;
                else{
                    n++;
                    l[tn] = (!fjson)? id :
                        { 'link' : dl,'img' : img };
                }
            }
        });
        callback(task.idx);
    })
    .catch(function(err){
        resp=err.statusCode;
        if(resp==undefined) {
            console.log(err);
            q.kill();
        }
        else{
            process.stdout.write('\x1b[31mError : '+task.url+
                ' \x1b[33mcode : '+resp+'\x1b[0m\n');  
        }

        callback(task.idx,resp);
    });
}, items_per_q);

q.drain = function(){
    if((failedflag && retry>0) && resp != 404){
        var tmpFailedPages = failedPages;
        failedPages = [];
        retry--;
        failedflag = false;
        console.log(`\n\n\x1b[33mFailed Pages: \x1b[31m${tmpFailedPages.toString()}\n\x1b[33mRetrying..\x1b[36m`);
        for(var loop_i = 0; loop_i<tmpFailedPages.length; loop_i++){
            safePush(tmpFailedPages[loop_i]);
        }
    }else{
        part--; retry = 3;
        failedPages = [];
        console.log('\n\x1b[42m\x1b[30mDone!\x1b[0m');
        if(part == 0){
            writeFile();
        }else{
            console.log('\n\n\x1b[45m\x1b[37m Fetching Creators\' new themes \x1b[0m');
            doLoopQueue();
        }
    }
}

function writeFile(){
    var odir;
    if(fjson) odir = './output/redundant/';
    else if(fmt == 'txt') odir = './output/txt/';
    else odir = './output/';
    if(!fs.existsSync(odir)) fs.mkdirSync(odir);
    if(fmt=="json"){ 
        l = (tjson)? JSON.stringify(l,null,4) : JSON.stringify(l);
        fn = (fjson)? 'l-'+fn:fn;
    }
    fs.writeFile(odir+fn+"."+fmt, l, function(err){
        if(!err){
            process.stdout.write('\n\n\x1b[32mFile successfully written!'+
                '\nCheck your project directory for the "\x1b[33m'+odir+
                fn+'.'+fmt+'\x1b[32m" directory\x1b[0m\n');
        }else{
            process.stdout.write('\033[<2>B'+err);
        }
    });
}

function safePush(safe_i){
    var urli;
    if(official) urli = url;
    else urli = (part == 2)? url[0]: url[1];
    q.push({url:urli+safe_i, idx: safe_i}, function(x,y){
        process.stdout.write('on page '+x+
            ' -> '+ctx+' Pages, '+
            (n-1)+' Themes, '+
            dupe+' Duplicates\r');
        if(y!=undefined){
            failedflag = true;
            failedPages.push(x);
        }else{
            ctx++;
        }
    });
}

function doLoopQueue(){
    for(var i = 1; i <= mxi; i++){
        safePush(i);
    }
}

function updater(x){
    try {
        l = require('./output/'+x+'.json');
        console.log('\n\x1b[46m\x1b[30m Updating existing data... \x1b[0m');
    } catch(err) {
        console.log('\n\x1b[46m\x1b[30m Creating new entries... \x1b[0m');
    }

}

var url,fn,part;

if(official){
    fn = 'officials';
    url = 'https://store.line.me/themeshop/showcase/new/en?page=';
    part = 1;
    if(fmt=='json') updater(fn);
}else{
    fn = 'creators';
    url = ['https://store.line.me/themeshop/showcase/top_creators/en?page=',
        'https://store.line.me/themeshop/showcase/new_creators/en?page='];
    part = 2;
    if(fmt=='json') updater(fn);
    console.log('\x1b[45m\x1b[37m Fetching Creators\' popular themes \x1b[0m');
}
doLoopQueue();





